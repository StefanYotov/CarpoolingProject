// <auto-generated />
using System;
using CarpoolingProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarpoolingProject.Data.Migrations
{
    [DbContext(typeof(CarpoolingContext))]
    partial class CarpoolingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            CityId = 1,
                            StreetName = "ulica selo"
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Bulgaria"
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("bit");

                    b.Property<int>("RatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RatingId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RatedUserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Driver"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Passanger"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Blocked"
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Travel", b =>
                {
                    b.Property<int>("TravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndPointId")
                        .HasColumnType("int");

                    b.Property<int>("FreeSpots")
                        .HasColumnType("int");

                    b.Property<int>("StartPointId")
                        .HasColumnType("int");

                    b.HasKey("TravelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EndPointId");

                    b.HasIndex("StartPointId");

                    b.ToTable("Travels");

                    b.HasData(
                        new
                        {
                            TravelId = 1,
                            CreatorId = 1,
                            DepartureTime = new DateTime(2021, 11, 15, 22, 50, 0, 0, DateTimeKind.Unspecified),
                            EndPointId = 1,
                            FreeSpots = 4,
                            StartPointId = 1
                        },
                        new
                        {
                            TravelId = 2,
                            CreatorId = 2,
                            DepartureTime = new DateTime(2021, 11, 15, 22, 50, 0, 0, DateTimeKind.Unspecified),
                            EndPointId = 1,
                            FreeSpots = 2,
                            StartPointId = 1
                        },
                        new
                        {
                            TravelId = 3,
                            CreatorId = 3,
                            DepartureTime = new DateTime(2021, 11, 15, 22, 50, 0, 0, DateTimeKind.Unspecified),
                            EndPointId = 1,
                            FreeSpots = 3,
                            StartPointId = 1
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.TravelApplication", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("ApplicantId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("TravelApplications");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.TravelPassenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("PassengerId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("TravelPassengers");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.Property<int>("TravelCountAsDriver")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "pesho.salama@gmail.com",
                            FirstName = "Pesho",
                            LastName = "Salama",
                            Password = "bezparola",
                            PhoneNumber = 88865432,
                            ReviewCount = 0,
                            StarsCount = 0,
                            TravelCountAsDriver = 0,
                            UserName = "PeshoSalama"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "foncho.tarikata@gmail.com",
                            FirstName = "Foncho",
                            LastName = "Tarikata",
                            Password = "bezparola",
                            PhoneNumber = 88863432,
                            ReviewCount = 0,
                            StarsCount = 0,
                            TravelCountAsDriver = 0,
                            UserName = "Customer"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "lyubo.grigorov@gmail.com",
                            FirstName = "Lyubo",
                            LastName = "Grigorov",
                            Password = "bezparola",
                            PhoneNumber = 88845432,
                            ReviewCount = 0,
                            StarsCount = 0,
                            TravelCountAsDriver = 0,
                            UserName = "Shafior"
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            Id = 2
                        });
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Address", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.City", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Rating", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "Author")
                        .WithMany("CreatedRatings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "RatedUser")
                        .WithMany("RatingsForUser")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("RatedUser");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Travel", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "Creator")
                        .WithMany("Travels")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.Address", "EndPoint")
                        .WithMany("TravelsWithEndingPoint")
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.Address", "StartPoint")
                        .WithMany("TravelsWithStartingPoint")
                        .HasForeignKey("StartPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EndPoint");

                    b.Navigation("StartPoint");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.TravelApplication", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "Applicant")
                        .WithMany("TravelApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.Travel", "Travel")
                        .WithMany("ApplicantsForTravel")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.TravelPassenger", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "Passenger")
                        .WithMany("PassengerForTravels")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.Travel", "Travel")
                        .WithMany("Passengers")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.UserRole", b =>
                {
                    b.HasOne("CarpoolingProject.Models.EntityModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarpoolingProject.Models.EntityModels.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Address", b =>
                {
                    b.Navigation("TravelsWithEndingPoint");

                    b.Navigation("TravelsWithStartingPoint");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.Travel", b =>
                {
                    b.Navigation("ApplicantsForTravel");

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("CarpoolingProject.Models.EntityModels.User", b =>
                {
                    b.Navigation("CreatedRatings");

                    b.Navigation("PassengerForTravels");

                    b.Navigation("RatingsForUser");

                    b.Navigation("Roles");

                    b.Navigation("TravelApplications");

                    b.Navigation("Travels");
                });
#pragma warning restore 612, 618
        }
    }
}
